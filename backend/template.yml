Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Environment:
      Variables:
        Env: ""
        DynamoEndpoint: ""
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: prd
      DefinitionBody:
        openapi: "3.0"
        info: {}
        paths:
          /users/{user_id}/schedules:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetScheduleListFunction.Arn}/invocations
              responses: {}
          /schedules/{schedule_id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetScheduleFunction.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutScheduleFunction.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteScheduleFunction.Arn}/invocations
              responses: {}
          /schedules:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostScheduleFunction.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  ScheduleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AttendancePlan_Schedule
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: UserID
          AttributeType: S
        - AttributeName: StartsAt
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserID-index
          KeySchema:
            - AttributeName: UserID
              KeyType: HASH
            - AttributeName: StartsAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  GetScheduleListFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: GetScheduleListFunction
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetScheduleListFunction
      CodeUri: cmd/schedule/get_list
      Handler: bootstrap
      Runtime: provided.al2023
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiGetScheduleList:
          Type: Api
          Properties:
            Path: /users/{user_id}/schedules
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          SCHEDULE_TABLE_NAME: !Ref ScheduleTable
          SCHEDULE_TABLE_ARN: !GetAtt ScheduleTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ScheduleTable
  GetScheduleListFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetScheduleListFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  GetScheduleListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetScheduleListFunction}
  GetScheduleFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: GetScheduleFunction
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetScheduleFunction
      CodeUri: cmd/schedule/get
      Handler: bootstrap
      Runtime: provided.al2023
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiGetSchedule:
          Type: Api
          Properties:
            Path: /schedules/{schedule_id}
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          SCHEDULE_TABLE_NAME: !Ref ScheduleTable
          SCHEDULE_TABLE_ARN: !GetAtt ScheduleTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ScheduleTable
  GetScheduleFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetScheduleFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  GetScheduleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetScheduleFunction}
  PostScheduleFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: PostScheduleFunction
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PostScheduleFunction
      CodeUri: cmd/schedule/post
      Handler: bootstrap
      Runtime: provided.al2023
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPostSchedule:
          Type: Api
          Properties:
            Path: /schedules
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          SCHEDULE_TABLE_NAME: !Ref ScheduleTable
          SCHEDULE_TABLE_ARN: !GetAtt ScheduleTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ScheduleTable
  PostScheduleFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostScheduleFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  PostScheduleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostScheduleFunction}
  PutScheduleFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: PutScheduleFunction
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PutScheduleFunction
      CodeUri: cmd/schedule/put
      Handler: bootstrap
      Runtime: provided.al2023
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPutSchedule:
          Type: Api
          Properties:
            Path: /schedules/{schedule_id}
            Method: PUT
            RestApiId: !Ref Api
      Environment:
        Variables:
          SCHEDULE_TABLE_NAME: !Ref ScheduleTable
          SCHEDULE_TABLE_ARN: !GetAtt ScheduleTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ScheduleTable
  PutScheduleFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PutScheduleFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  PutScheduleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutScheduleFunction}
  DeleteScheduleFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: DeleteScheduleFunction
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DeleteScheduleFunction
      CodeUri: cmd/schedule/delete
      Handler: bootstrap
      Runtime: provided.al2023
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiDeleteSchedule:
          Type: Api
          Properties:
            Path: /schedules/{schedule_id}
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          SCHEDULE_TABLE_NAME: !Ref ScheduleTable
          SCHEDULE_TABLE_ARN: !GetAtt ScheduleTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ScheduleTable
  DeleteScheduleFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DeleteScheduleFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  DeleteScheduleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteScheduleFunction}

Outputs:
  GetScheduleListFunction:
    Description: "GetScheduleListFunction Name"
    Value: !Ref GetScheduleListFunction
  GetScheduleFunction:
    Description: "GetScheduleFunction Name"
    Value: !Ref GetScheduleFunction
  PostScheduleFunction:
    Description: "PostScheduleFunction Name"
    Value: !Ref PostScheduleFunction
  PutScheduleFunction:
    Description: "PutScheduleFunction Name"
    Value: !Ref PutScheduleFunction
  DeleteScheduleFunction:
    Description: "DeleteScheduleFunction Name"
    Value: !Ref DeleteScheduleFunction
  API:
    Description: "API Gateway endpoint URL for the API"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prd"
